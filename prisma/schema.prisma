// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}


model Board {
  id String @id @default(uuid())
  orgId String
  title String
  imageId String
  imageThumbUrl String
  imageFullUrl String
  imageUserName String
  imageLinkHTML String

  lists List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List  {
id String @id @default(uuid())
title String

// order - how it's going to be ordered in the user's screen (first, between, last, etc.)
order Int

boardId String

// created the relation using the boardId field referencing to the id field in the Board model
// when we delete a Board, this List also gets deleted  (cascading)
board Board @relation(fields: [boardId], references: [id], onDelete: Cascade) 

cards Card[]

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index([boardId])
}


model Card {
id String @id @default(uuid())
title String

// order - what's going to be modified every time we drag and drop the card or the list itself
// (drop to another list, top, bottom) bit more complicated 
order Int
description String? @db.Text

listId String

// create the relation using listId field referencing to the id field in the List model 
// when we delete a List, this Card also gets deleted (cascading)
list List @relation(fields:[listId], references: [id], onDelete: Cascade)

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
@@index([listId])
}